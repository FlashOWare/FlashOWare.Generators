using Verifier = FlashOWare.Tests.CodeAnalysis.CSharp.Testing.CSharpIncrementalGeneratorVerifier<FlashOWare.Generators.Enumerations.EnumGetNameGenerator>;

namespace FlashOWare.Tests.Generators.Enumerations;

public class EnumGetNameGeneratorTests
{
	[Fact]
	public async Task Execute_NoAttributes_NoEmit()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(DateTimeKind.Utc);
				}
			}
			""";

		await Verifier.VerifyAsync(code);
	}

	[Fact]
	public async Task Execute_WithAttributes_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumGetNameAttribute<DateTimeKind>]
			public static partial class Class
			{
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static string? GetName(global::System.DateTimeKind value)
				{
					return value switch
					{
						global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
						global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
						global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
						_ => null,
					};
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Namespace.Class.GetName.g.cs", generated));
	}

	[Fact]
	public async Task Execute_Partial_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumGetNameAttribute<DateTimeKind>]
			public static partial class Class
			{
			}

			[GeneratedEnumGetNameAttribute<UriKind>]
			public static partial class Class
			{
			}

			[GeneratedEnumGetNameAttribute<DateTimeKind>]
			[GeneratedEnumGetNameAttribute<UriKind>]
			public static class NotPartial
			{
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static string? GetName(global::System.DateTimeKind value)
				{
					return value switch
					{
						global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
						global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
						global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
						_ => null,
					};
				}

				{{AutoGenerated.GeneratedCodeAttribute}}
				public static string? GetName(global::System.UriKind value)
				{
					return value switch
					{
						global::System.UriKind.RelativeOrAbsolute => nameof(global::System.UriKind.RelativeOrAbsolute),
						global::System.UriKind.Absolute => nameof(global::System.UriKind.Absolute),
						global::System.UriKind.Relative => nameof(global::System.UriKind.Relative),
						_ => null,
					};
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Namespace.Class.GetName.g.cs", generated));
	}

	[Fact]
	public async Task Execute_GlobalNamespace_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			[GeneratedEnumGetNameAttribute<DateTimeKind>]
			public static partial class Class
			{
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static string? GetName(global::System.DateTimeKind value)
				{
					return value switch
					{
						global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
						global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
						global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
						_ => null,
					};
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Class.GetName.g.cs", generated));
	}

	[Fact]
	public async Task Execute_ErrorType_NoEmit()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumGetNameAttribute<{|#0:Error|}>]
			[GeneratedEnumGetNameAttribute<{|#1:true|}>]
			[GeneratedEnumGetNameAttribute<{|#2:240|}>]
			[{|#3:GeneratedEnumGetNameAttribute<>|}]
			[GeneratedEnumGetNameAttribute<{|#4:]|}
			public static partial class Class
			{
			}
			""";

		DiagnosticResult[] diagnostics = [
			Diagnostic.CS0246(0, "Error"),
			Diagnostic.CS1031(1),
			Diagnostic.CS1031(2),
			Diagnostic.CS7003(3),
			Diagnostic.CS1003(4, '>'),
			Diagnostic.CS1031(4),
		];

		await Verifier.VerifyAsync(code, diagnostics);
	}

	[Fact]
	public async Task Execute_IncludeErrors_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumGetNameAttribute<DateTimeKind>]
			[GeneratedEnumGetNameAttribute<{|#0:?|}>]
			public static partial class Class
			{
			}

			[{|#1:GeneratedEnumGetNameAttribute<DateTimeKind, DateTimeKind>|}]
			[{|#2:GeneratedEnumGetNameAttribute<,>|}]
			[{|#3:GeneratedEnumGetNameAttribute|#3}{|#4:>|#4}]
			[{|#5:GeneratedEnumGetNameAttribute|}]
			public static partial class Class
			{
			}
			""";

		DiagnosticResult[] diagnostics = [
			Diagnostic.CS1031(0),
			Diagnostic.CS0305(1, "type", "GeneratedEnumGetNameAttribute<TEnum>", 1),
			Diagnostic.CS0305(2, "type", "GeneratedEnumGetNameAttribute<TEnum>", 1),
			Diagnostic.CS0305(3, "type", "GeneratedEnumGetNameAttribute<TEnum>", 1),
			Diagnostic.CS1001(4),
			Diagnostic.CS0305(5, "type", "GeneratedEnumGetNameAttribute<TEnum>", 1),
		];

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static string? GetName(global::System.DateTimeKind value)
				{
					return value switch
					{
						global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
						global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
						global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
						_ => null,
					};
				}
			}

			""";

		await Verifier.VerifyAsync(code, diagnostics, ("Namespace.Class.GetName.g.cs", generated));
	}
}
