using Verifier = FlashOWare.Tests.CodeAnalysis.CSharp.Testing.CSharpIncrementalGeneratorVerifier<FlashOWare.Generators.Enumerations.EnumInterceptorGenerator>;

namespace FlashOWare.Tests.Generators.Enumerations;

public class EnumInterceptorGeneratorTests
{
	[Fact]
	public async Task Execute_NoInvocations_NoEmit()
	{
		string code = """
			using System;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(typeof(DateTimeKind), DateTimeKind.Utc);
					_ = Enum.IsDefined(typeof(DateTimeKind), DateTimeKind.Utc);

					_ = GetName<StringSplitOptions>(StringSplitOptions.RemoveEmptyEntries);
					_ = IsDefined<StringSplitOptions>(StringSplitOptions.RemoveEmptyEntries);
				}

				private static string? GetName<TEnum>(TEnum value) where TEnum : struct, Enum
					=> Enum.GetName<TEnum>(value);

				private static bool IsDefined<TEnum>(TEnum value) where TEnum : struct, Enum
					=> Enum.IsDefined<TEnum>(value);
			}
			""";

		await Verifier.VerifyAsync(code);
	}

	[Fact]
	public async Task Execute_WithInvocations_AddSource()
	{
		string code = """
			using System;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(DateTimeKind.Utc);
					_ = Enum.GetName<StringSplitOptions>(StringSplitOptions.RemoveEmptyEntries);
					_ = Enum.IsDefined(DateTimeKind.Utc);
					_ = Enum.IsDefined<StringSplitOptions>(StringSplitOptions.RemoveEmptyEntries);
				}
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			{{AutoGenerated.InterceptsLocationAttribute}}

			namespace FlashOWare.Generated
			{
				using System.Runtime.CompilerServices;

				{{AutoGenerated.GeneratedCodeAttribute}}
				file static class EnumInterceptors
				{
					[InterceptsLocation(@"/0/Test0.cs", 9, 12)]
					internal static string? GetName0(global::System.DateTimeKind value)
					{
						return value switch
						{
							global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
							global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
							global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
							_ => null,
						};
					}
					[InterceptsLocation(@"/0/Test0.cs", 10, 12)]
					internal static string? GetName1(global::System.StringSplitOptions value)
					{
						return value switch
						{
							global::System.StringSplitOptions.None => nameof(global::System.StringSplitOptions.None),
							global::System.StringSplitOptions.RemoveEmptyEntries => nameof(global::System.StringSplitOptions.RemoveEmptyEntries),
							global::System.StringSplitOptions.TrimEntries => nameof(global::System.StringSplitOptions.TrimEntries),
							_ => null,
						};
					}
					[InterceptsLocation(@"/0/Test0.cs", 11, 12)]
					internal static bool IsDefined0(global::System.DateTimeKind value)
					{
						return value is
							global::System.DateTimeKind.Unspecified or
							global::System.DateTimeKind.Utc or
							global::System.DateTimeKind.Local;
					}
					[InterceptsLocation(@"/0/Test0.cs", 12, 12)]
					internal static bool IsDefined1(global::System.StringSplitOptions value)
					{
						return value is
							global::System.StringSplitOptions.None or
							global::System.StringSplitOptions.RemoveEmptyEntries or
							global::System.StringSplitOptions.TrimEntries;
					}
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("FlashOWare.Generated.EnumInterceptors.g.cs", generated));
	}

	[Fact]
	public async Task Execute_GlobalNamespace_AddSource()
	{
		string code = """
			using System;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(DateTimeKind.Utc);
					_ = Enum.IsDefined(DateTimeKind.Utc);
				}
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			{{AutoGenerated.InterceptsLocationAttribute}}

			namespace FlashOWare.Generated
			{
				using System.Runtime.CompilerServices;

				{{AutoGenerated.GeneratedCodeAttribute}}
				file static class EnumInterceptors
				{
					[InterceptsLocation(@"/0/Test0.cs", 7, 12)]
					internal static string? GetName0(global::System.DateTimeKind value)
					{
						return value switch
						{
							global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
							global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
							global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
							_ => null,
						};
					}
					[InterceptsLocation(@"/0/Test0.cs", 8, 12)]
					internal static bool IsDefined0(global::System.DateTimeKind value)
					{
						return value is
							global::System.DateTimeKind.Unspecified or
							global::System.DateTimeKind.Utc or
							global::System.DateTimeKind.Local;
					}
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("FlashOWare.Generated.EnumInterceptors.g.cs", generated));
	}

	[Theory]
	[InlineData("GetName", "Enum.GetName<TEnum>(TEnum)")]
	[InlineData("IsDefined", "Enum.IsDefined<TEnum>(TEnum)")]
	public async Task Execute_Error_NoEmit(string method, string signature)
	{
		string code = $$"""
			using System;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.{|#0:{{method}}|}();
					_ = {|#1:Enum.{|#2:{{method}}<>|}|}();
					_ = Enum.{{method}}({|#3:Error|});
					_ = Enum.{|#4:{{method}}<{|#5:Error|}>|}();
					_ = Enum.{|#6:{{method}}|}(240);
					_ = {|#7:Enum.{{method}}<240|}>({|#8:)|};
					_ = Enum.{{method}}<DayOfWeek>({|#9:6|});

					_ = Enum.{|#10:{{method}}|}(default);
					_ = Enum.{|#11:{{method}}<int>|}(default);
				}
			}
			""";

		DiagnosticResult[] diagnostics = [
			Diagnostic.CS1501(0, method, 0),
			Diagnostic.CS0305(1, "method group", method, 1),
			Diagnostic.CS7036(2, "value", signature),
			Diagnostic.CS0103(3, "Error"),
			Diagnostic.CS7036(4, "value", signature),
			Diagnostic.CS0246(5, "Error"),
			Diagnostic.CS0315(6, "int", "TEnum", signature, "int", "System.Enum"),
			Diagnostic.CS0019(7, '<', "method group", "int"),
			Diagnostic.CS1525(8, ')'),
			Diagnostic.CS1503(9, "int", "System.DayOfWeek"),

			Diagnostic.CS0411(10, signature),
			Diagnostic.CS0315(11, "int", "TEnum", signature, "int", "System.Enum"),
		];

		await Verifier.VerifyAsync(code, diagnostics);
	}
}
