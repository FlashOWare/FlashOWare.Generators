using Verifier = FlashOWare.Tests.CodeAnalysis.CSharp.Testing.CSharpIncrementalGeneratorVerifier<FlashOWare.Generators.Enumerations.EnumInterceptorGenerator>;

namespace FlashOWare.Tests.Generators.Enumerations;

public class EnumInterceptorGeneratorTests
{
	[Fact]
	public async Task Execute_NoAttributes_NoEmit()
	{
		string code = """
			using System;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(typeof(DateTimeKind), DateTimeKind.Utc);
					_ = Enum.IsDefined(typeof(DateTimeKind), DateTimeKind.Utc);
				}
			}
			""";

		await Verifier.VerifyAsync(code);
	}

	[Fact]
	public async Task Execute_WithAttributes_AddSource()
	{
		string code = """
			using System;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.GetName(DateTimeKind.Utc);
					_ = Enum.IsDefined(DateTimeKind.Utc);
				}
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			{{AutoGenerated.InterceptsLocationAttribute}}

			namespace FlashOWare.Generated
			{
				using System.Runtime.CompilerServices;

				{{AutoGenerated.GeneratedCodeAttribute}}
				file static class EnumInterceptors
				{
					[InterceptsLocation(@"/0/Test0.cs", 9, 12)]
					internal static string? GetName0(global::System.DateTimeKind value)
					{
						return value switch
						{
							global::System.DateTimeKind.Unspecified => nameof(global::System.DateTimeKind.Unspecified),
							global::System.DateTimeKind.Utc => nameof(global::System.DateTimeKind.Utc),
							global::System.DateTimeKind.Local => nameof(global::System.DateTimeKind.Local),
							_ => null,
						};
					}
					[InterceptsLocation(@"/0/Test0.cs", 10, 12)]
					internal static bool IsDefined0(global::System.DateTimeKind value)
					{
						return value is
							global::System.DateTimeKind.Unspecified or
							global::System.DateTimeKind.Utc or
							global::System.DateTimeKind.Local;
					}
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("FlashOWare.Generated.EnumInterceptors.g.cs", generated));
	}
}
