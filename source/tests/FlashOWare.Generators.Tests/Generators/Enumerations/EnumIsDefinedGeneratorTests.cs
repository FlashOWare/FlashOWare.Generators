using Verifier = FlashOWare.Tests.CodeAnalysis.CSharp.Testing.CSharpIncrementalGeneratorVerifier<FlashOWare.Generators.Enumerations.EnumIsDefinedGenerator>;

namespace FlashOWare.Tests.Generators.Enumerations;

public class EnumIsDefinedGeneratorTests
{
	[Fact]
	public async Task Execute_NoAttributes_NoEmit()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			public class Class
			{
				public void Method()
				{
					_ = Enum.IsDefined(StringComparison.Ordinal);
				}
			}
			""";

		await Verifier.VerifyAsync(code);
	}

	[Fact]
	public async Task Execute_WithAttribute_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumIsDefinedAttribute<StringComparison>]
			public static partial class Class
			{
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::System.StringComparison value)
				{
					return value is
						global::System.StringComparison.CurrentCulture or
						global::System.StringComparison.CurrentCultureIgnoreCase or
						global::System.StringComparison.InvariantCulture or
						global::System.StringComparison.InvariantCultureIgnoreCase or
						global::System.StringComparison.Ordinal or
						global::System.StringComparison.OrdinalIgnoreCase;
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Namespace.Class.IsDefined.g.cs", generated));
	}

	[Fact]
	public async Task Execute_WithAttributes_AddSources()
	{
		string[] code = ["""
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			[GeneratedEnumIsDefinedAttribute<DayOfWeek>]
			public static partial class Class
			{
			}
			""", """
			using System;
			using FlashOWare.Generators;
			using Alias = FlashOWare.Generators.GeneratedEnumIsDefinedAttribute<System.MidpointRounding>;

			namespace Namespace;

			[Alias]
			[GeneratedEnumIsDefinedAttribute<DateTimeKind>]
			public static partial class Class
			{
			}

			[Obsolete("Test")]
			[GeneratedEnumIsDefinedAttribute<DateTimeKind>]
			public partial class NotStatic
			{
			}

			[{|#0:GeneratedEnumIsDefinedAttribute<DateTimeKind>|}]
			public partial struct ValueType
			{
			}
			""",
		];

		DiagnosticResult diagnostic = Diagnostic.CS0592(0, "GeneratedEnumIsDefinedAttribute<>", "class");

		(string, string)[] generated = [
			("Namespace.Class.IsDefined.g.cs", $$"""
				{{AutoGenerated.Header}}
				namespace Namespace;

				partial class Class
				{
					{{AutoGenerated.GeneratedCodeAttribute}}
					public static bool IsDefined(global::System.DayOfWeek value)
					{
						return value is
							global::System.DayOfWeek.Sunday or
							global::System.DayOfWeek.Monday or
							global::System.DayOfWeek.Tuesday or
							global::System.DayOfWeek.Wednesday or
							global::System.DayOfWeek.Thursday or
							global::System.DayOfWeek.Friday or
							global::System.DayOfWeek.Saturday;
					}

					{{AutoGenerated.GeneratedCodeAttribute}}
					public static bool IsDefined(global::System.MidpointRounding value)
					{
						return value is
							global::System.MidpointRounding.ToEven or
							global::System.MidpointRounding.AwayFromZero or
							global::System.MidpointRounding.ToZero or
							global::System.MidpointRounding.ToNegativeInfinity or
							global::System.MidpointRounding.ToPositiveInfinity;
					}

					{{AutoGenerated.GeneratedCodeAttribute}}
					public static bool IsDefined(global::System.DateTimeKind value)
					{
						return value is
							global::System.DateTimeKind.Unspecified or
							global::System.DateTimeKind.Utc or
							global::System.DateTimeKind.Local;
					}
				}

				"""),
			("Namespace.NotStatic.IsDefined.g.cs", $$"""
				{{AutoGenerated.Header}}
				namespace Namespace;

				partial class NotStatic
				{
					{{AutoGenerated.GeneratedCodeAttribute}}
					public static bool IsDefined(global::System.DateTimeKind value)
					{
						return value is
							global::System.DateTimeKind.Unspecified or
							global::System.DateTimeKind.Utc or
							global::System.DateTimeKind.Local;
					}
				}

				"""),
		];

		await Verifier.VerifyAsync(code, diagnostic, generated);
	}

	[Fact]
	public async Task Execute_Partial_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumIsDefinedAttribute<ConsoleModifiers>]
			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<System.IO.FileAccess>]
			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<ConsoleModifiers>]
			[GeneratedEnumIsDefinedAttribute<System.IO.FileAccess>]
			public static class NotPartial
			{
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::System.ConsoleModifiers value)
				{
					return value is
						global::System.ConsoleModifiers.Alt or
						global::System.ConsoleModifiers.Shift or
						global::System.ConsoleModifiers.Control;
				}

				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::System.IO.FileAccess value)
				{
					return value is
						global::System.IO.FileAccess.Read or
						global::System.IO.FileAccess.Write or
						global::System.IO.FileAccess.ReadWrite;
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Namespace.Class.IsDefined.g.cs", generated));
	}

	[Fact]
	public async Task Execute_GlobalNamespace_AddSource()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			[GeneratedEnumIsDefinedAttribute<MyEnum>]
			public static partial class Class
			{
			}

			public enum MyEnum
			{
				Zero,
				One,
				Two,
				Three,
				Four,
			}
			""";

		string generated = $$"""
			{{AutoGenerated.Header}}
			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::MyEnum value)
				{
					return value is
						global::MyEnum.Zero or
						global::MyEnum.One or
						global::MyEnum.Two or
						global::MyEnum.Three or
						global::MyEnum.Four;
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Class.IsDefined.g.cs", generated));
	}

	[Fact]
	public async Task Execute_Duplicate_AddDistinct()
	{
		string[] code = ["""
			using System.IO;
			using FlashOWare.Generators;

			namespace Namespace;

			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			public static partial class Class
			{
			}
			""", """
			using System.IO;
			using FlashOWare.Generators;

			namespace Namespace;

			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			public static partial class Class
			{
			}

			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			[GeneratedEnumIsDefinedAttribute<SearchOption>]
			public static partial class Class
			{
			}
			"""
		];

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::System.IO.SearchOption value)
				{
					return value is
						global::System.IO.SearchOption.TopDirectoryOnly or
						global::System.IO.SearchOption.AllDirectories;
				}
			}

			""";

		await Verifier.VerifyAsync(code, ("Namespace.Class.IsDefined.g.cs", generated));
	}

	[Fact]
	public async Task Execute_ErrorType_NoEmit()
	{
		string code = """
			using System;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumIsDefinedAttribute<{|#0:Error|}>]
			[GeneratedEnumIsDefinedAttribute<{|#1:true|}>]
			[GeneratedEnumIsDefinedAttribute<{|#2:240|}>]
			[{|#3:GeneratedEnumIsDefinedAttribute<>|}]
			[GeneratedEnumIsDefinedAttribute<{|#4:]|}
			public static partial class Class
			{
			}
			""";

		DiagnosticResult[] diagnostics = [
			Diagnostic.CS0246(0, "Error"),
			Diagnostic.CS1031(1),
			Diagnostic.CS1031(2),
			Diagnostic.CS7003(3),
			Diagnostic.CS1003(4, '>'),
			Diagnostic.CS1031(4),
		];

		await Verifier.VerifyAsync(code, diagnostics);
	}

	[Fact]
	public async Task Execute_IncludeErrors_AddSource()
	{
		string code = """
			using System.Threading;
			using FlashOWare.Generators;

			namespace Namespace;

			[GeneratedEnumIsDefinedAttribute<EventResetMode>]
			[GeneratedEnumIsDefinedAttribute<{|#0:?|}>]
			public static partial class Class
			{
			}

			[{|#1:GeneratedEnumIsDefinedAttribute<EventResetMode, EventResetMode>|}]
			[{|#2:GeneratedEnumIsDefinedAttribute<,>|}]
			[{|#3:GeneratedEnumIsDefinedAttribute|#3}{|#4:>|#4}]
			[{|#5:GeneratedEnumIsDefinedAttribute|}]
			public static partial class Class
			{
			}
			""";

		DiagnosticResult[] diagnostics = [
			Diagnostic.CS1031(0),
			Diagnostic.CS0305(1, "type", "GeneratedEnumIsDefinedAttribute<TEnum>", 1),
			Diagnostic.CS0305(2, "type", "GeneratedEnumIsDefinedAttribute<TEnum>", 1),
			Diagnostic.CS0305(3, "type", "GeneratedEnumIsDefinedAttribute<TEnum>", 1),
			Diagnostic.CS1001(4),
			Diagnostic.CS0305(5, "type", "GeneratedEnumIsDefinedAttribute<TEnum>", 1),
		];

		string generated = $$"""
			{{AutoGenerated.Header}}
			namespace Namespace;

			partial class Class
			{
				{{AutoGenerated.GeneratedCodeAttribute}}
				public static bool IsDefined(global::System.Threading.EventResetMode value)
				{
					return value is
						global::System.Threading.EventResetMode.AutoReset or
						global::System.Threading.EventResetMode.ManualReset;
				}
			}
		
			""";

		await Verifier.VerifyAsync(code, diagnostics, ("Namespace.Class.IsDefined.g.cs", generated));
	}
}
